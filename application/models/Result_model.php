<?php
/**
 * Created by PhpStorm.
 * User: ducto
 * Date: 10/2/2018
 * Time: 11:43 PM
 */
defined('BASEPATH') OR exit('No direct script access allowed');

class Result_model extends STEVEN_Model
{
    public $table;
    public $table_category;
    protected $_data_category;

    public function __construct()
    {
        parent::__construct();
        $this->load->model(['category_model']);
        $this->load->helper("datetime");
        $this->table = "result";
        $this->table_category = "category";
        $this->_data_category = new Category_model();
    }

    public function _where_custom($args = array())
    {
        parent::_where_custom($args); // TODO: Change the autogenerated stub
        extract($args);
        if(!empty($category_id)) $this->db->where("$this->table.category_id", $category_id);
    }

    public function getByDay($day, $categoryId = [],$updateCache = false){
        $key = "getByDay_".md5($day)."_".md5(json_encode($categoryId));
        $data = $this->getCache($key);
        if(empty($data) || $updateCache == true) {
            if ($categoryId >= 42 && $categoryId <= 45):
                $this->db->select('data_result,data_info,category_id,displayed_time');
            else:
                $this->db->select('data_result,category_id,displayed_time');
            endif;
            $this->db->from($this->table);
            $this->db->where_in("category_id", $categoryId);
            $this->db->where("displayed_time", $day);
            $this->db->order_by("id", "ASC");
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($key,$data,60*1);
        }
        return $data;
    }

    public function getFromDayToDay($date_begin, $date_end, $categoryId = [],$updateCache = false){
        $key = "getFromDayToDay_".md5($date_begin.$date_end)."_".md5(json_encode($categoryId));
        $data = $this->getCache($key);
        if(empty($data) || $updateCache == true) {
            $this->db->select('data_result,data_info,category_id,displayed_time,created_time,updated_time');
            $this->db->from($this->table);
            if ($categoryId)
                $this->db->where_in("category_id", $categoryId);
            $this->db->where("displayed_time >=", $date_begin);
            $this->db->where("displayed_time <=", $date_end);
            $this->db->order_by('displayed_time', 'DESC');
            $this->db->order_by("id", "ASC");
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($key,$data);
        }
        return $data;
    }

    public function getFromDayToDaySelect($date_begin, $date_end, $categoryId = [], $day_prize=null, $select, $updateCache = false){
        $key = "getFromDayToDaySelect_".md5($date_begin.$date_end)."_".md5(json_encode($categoryId));
        $data = $this->getCache($key);
        if(empty($data) || $updateCache == true) {
            $this->db->select($select);
            $this->db->from($this->table);
            if ($categoryId)
                $this->db->where_in("category_id", $categoryId);
            $this->db->where("displayed_time >=", $date_begin);
            $this->db->where("displayed_time <=", $date_end);
            if (!empty($day_prize)) {
                $day_prize = json_decode($day_prize, true);
                $this->db->where_in('DAYOFWEEK(displayed_time)', $day_prize);
            };
            $this->db->order_by('displayed_time', 'DESC');
            $this->db->order_by("id", "ASC");
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($key,$data);
        }
        return $data;
    }

    public function getResultNearest($day, $categoryId = [], $limit=1, $updateCache = false, $day_prize=''){
        $categoryId = (array) $categoryId;
        $key = "getResultNearest-$day-c".implode('-',$categoryId)."-lm$limit";
        $data = $this->getCache($key);
        if(empty($data) || $updateCache == true) {
            $this->db->select('data_result,data_info,category_id,displayed_time,created_time,updated_time');
            $this->db->from($this->table);
            $this->db->where_in("category_id", $categoryId);
            $this->db->where("displayed_time <=", $day);
            if (!empty($day_prize)) {
                $day_prize = json_decode($day_prize, true);
                $this->db->where_in('DAYOFWEEK(displayed_time)', $day_prize);
            };
            $this->db->order_by('displayed_time', 'DESC');
            $this->db->order_by("id", "ASC");
            if ($limit)
                $this->db->limit($limit);
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($key,$data,5);
        }
        return $data;
    }

    public function getResultNearestProvinceMB($day, $categoryId, $dow, $limit = 1, $updateCache = false){
        $key = "getResultNearest-$day-c".$categoryId."-lm$limit";
        $data = $this->getCache($key);
        if(empty($data) || $updateCache == true) {
            $dow = explode(',', $dow);
            $this->db->select('data_result,data_info,category_id,displayed_time,created_time,updated_time');
            $this->db->from($this->table);
            $this->db->where("category_id", $categoryId);
            $this->db->where("displayed_time <=", $day);
            $this->db->where_in('DAYOFWEEK(displayed_time)', $dow);
            $this->db->order_by('displayed_time', 'DESC');
            $this->db->order_by("id", "ASC");
            if ($limit)
                $this->db->limit($limit);
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($key,$data,60*1);
        }
        return $data;
    }

    public function getByLive($day, $categoryId = []){
        if ($categoryId >= 42 && $categoryId <= 45):
            $this->db->select('data_result,data_info,code,displayed_time');
        else:
            $this->db->select('data_result,code,displayed_time');
        endif;
        $this->db->from($this->table);
        $this->db->join($this->table_category,"$this->table.category_id = $this->table_category.id",'left');
        $this->db->where_in("category_id",$categoryId);
        $this->db->where("displayed_time",$day);
        $query = $this->db->get();
        return $query->result_array();
    }

    public function getLastResultByCategory($categoryId = [],$updateCache = false){
        $key = "getLastResultByCategory_".md5(json_encode($categoryId));
        $data = $this->getCache($key);
        if(empty($data) || $updateCache == true) {
            if ($categoryId >= 42 && $categoryId <= 45):
                $this->db->select('data_result,data_info,category_id,displayed_time');
            else:
                $this->db->select('data_result,category_id,displayed_time');
            endif;
            $this->db->from($this->table);
            $this->db->where_in("category_id", $categoryId);
            $this->db->order_by("displayed_time", "DESC");
            $this->db->order_by("id", "ASC");
            if (is_array($categoryId))
                $this->db->limit(count($categoryId));
            else
                $this->db->limit(1);
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($key,$data,5);
        }
        return $data;
    }

    public function getByCategory($category_id,$limit,$page=1,$updateCache = false){
        $key = "getByCategory_".md5(json_encode($category_id))."_limit{$limit}_$page";
        $data = $this->getCache($key);
        if(empty($data) || $updateCache == true) {
            if ($category_id >= 42 && $category_id <= 45):
                $this->db->select('data_result,data_info,category_id,displayed_time,created_time,updated_time');
            else:
                $this->db->select('data_result,data_info,category_id,displayed_time,created_time,updated_time');
            endif;
            $this->db->from($this->table);
            if ($category_id)
                $this->db->where_in("category_id", (array)$category_id);
            $this->db->order_by('displayed_time', 'DESC');
            $this->db->order_by("id", "ASC");
            $offset = ($page - 1) * $limit;
            $this->db->limit($limit, $offset);
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($key,$data,5);
        }
        return $data;
    }

    public function getDataByWeekday($category_id,$weekday,$limit,$page=1,$date_end='',$updateCache = false){
        $key = "getDataByWeekday_".md5(json_encode($category_id)."_{$weekday}_limit{$limit}_$page");
        $data = $this->getCache($key);
        if(empty($data) || $updateCache == true) {
            $this->db->select('data_result,data_info,category_id,displayed_time,created_time,updated_time');
            $this->db->from($this->table);
            $this->db->where_in("category_id", (array)$category_id);
            if (!empty($date_end)) $this->db->where("displayed_time <=", $date_end);
            /*The DAYOFWEEK() function returns the weekday index for a given date (a number from 1 to 7).
                        Note dayofweek MYSQL: 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday.*/
            $this->db->where("DAYOFWEEK(displayed_time)", $weekday == 8 ? 1 : $weekday);
            $this->db->order_by('displayed_time', 'DESC');
            $this->db->order_by("id", "ASC");
            $offset = ($page - 1) * $limit;
            $this->db->limit($limit, $offset);
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($key,$data,60*60);
        }
        return $data;
    }

    public function getFromWeekdayvsDayToDay($date_begin, $date_end, $categoryId = [], $weekday, $updateCache = false){
        $key = "getFromDayToDay_".md5($date_begin.$date_end)."_$weekday-".md5(json_encode($categoryId));
        $data = $this->getCache($key);
        if(empty($data) || $updateCache == true) {
            $this->db->select('data_result,data_info,category_id,displayed_time,created_time,updated_time');
            $this->db->from($this->table);
            if ($categoryId)
                $this->db->where_in("category_id", $categoryId);
            $this->db->where("displayed_time >=", $date_begin);
            $this->db->where("displayed_time <=", $date_end);
            $this->db->where("DAYOFWEEK(displayed_time)", $weekday == 8 ? 1 : $weekday);
            $this->db->order_by('displayed_time', 'DESC');
            $this->db->order_by("id", "ASC");
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($key,$data);
        }
        return $data;
    }

    public function getDataDayByPrize($category_id,$prize,$limit,$page=1,$updateCache = false){
        $this->db->select('data_result,category_id,displayed_time');
        $this->db->from($this->table);
        $this->db->where_in("category_id",(array)$category_id);
        $this->db->where_in("DAYOFWEEK(displayed_time)",(array)$prize);
        $this->db->order_by('displayed_time', 'DESC');
        $offset = ($page-1)*$limit;
        $this->db->limit($limit,$offset);
        $query = $this->db->get();
        return $query->result_array();
    }

    public function getTotalByCategory($category_id,$updateCache = false){
        $key = "getTotalByCategory_".md5(json_encode($category_id));
        $data = $this->getCache($key);
        if(empty($data)){
            $this->db->select('1');
            $this->db->from($this->table);
            $this->db->where_in("category_id",(array)$category_id);
            $query = $this->db->get();
            $data = $query->num_rows();
            $this->setCache($key,$data,60*30);
        }
        return $data;
    }

    public function getDataResultStatistic($catId,$limit = NULL,$order = "DESC") {
        $key = "statistic_".implode('_',(array)$catId)."_{$limit}_{$order}";
        $data = $this->getCache($key);
        if(empty($data)){
            $this->db->select('data_result,displayed_time');
            $this->db->from($this->table);
            $this->db->where_in("category_id", $catId );
            $this->db->where("displayed_time != ", date('Y-m-d'));
            $this->db->order_by('displayed_time', $order);
            if(!empty($limit)) $this->db->limit($limit);
            $data = $this->db->get()->result_array();
            $this->setCache($key,$data,60*60*1);
        }
        return $data;
    }

    public function getDataResultStatisticProvinceMB($catId, $dow, $limit = NULL, $order = "DESC") {
        $key = "getDataResultStatisticProvinceMB_".implode('_',(array)$catId)."_{$limit}_{$order}";
        $data = $this->getCache($key);
        if(empty($data)){
            $dow = explode(',', $dow);
            $this->db->select('data_result,displayed_time');
            $this->db->from($this->table);
            $this->db->where("category_id", $catId);
            $this->db->where("displayed_time != ", date('Y-m-d'));
            $this->db->where_in('DAYOFWEEK(displayed_time)', $dow);
            $this->db->order_by('displayed_time', $order);
            if(!empty($limit)) $this->db->limit($limit);
            $data = $this->db->get()->result_array();
            $this->setCache($key,$data,60*60*1);
        }
        return $data;
    }

    public function getDataResultStatisticByDate($catId,$dateBegin, $dateEnd,$order = "DESC") {
        $key = "statistic_".implode('_',(array)$catId)."_{$dateBegin}_{$dateEnd}_{$order}";
        $data = $this->getCache($key);
        if(empty($data)) {
            $this->db->select(['data_result', 'displayed_time']);
            $this->db->from($this->table);
            if(is_array($catId)) $this->db->where_in("category_id", $catId);
            else $this->db->where("category_id", $catId);
            $this->db->where('displayed_time >=', $dateBegin);
            $this->db->where('displayed_time <=', $dateEnd);
            $this->db->order_by('displayed_time', $order);
            $data = $this->db->get()->result_array();
            $this->setCache($key,$data,60*10);
        }
        return $data;
    }

    public function getDataResultStatisticProvinceMBByDate($catId, $dateBegin, $dateEnd, $dow) {
        $key = "getDataResultStatisticProvinceMBByDate_".implode('_',(array)$catId)."_{$dateBegin}_{$dateEnd}_{$dow}";
        $data = $this->getCache($key);
        if(empty($data)) {
            $dow = explode(',', $dow);
            $this->db->select(['data_result', 'displayed_time']);
            $this->db->from($this->table);
            $this->db->where("category_id", $catId);
            $this->db->where('displayed_time >=', $dateBegin);
            $this->db->where('displayed_time <=', $dateEnd);
            $this->db->where_in('DAYOFWEEK(displayed_time)', $dow);
            $this->db->order_by('displayed_time', 'DESC');
            $data = $this->db->get()->result_array();
            $this->setCache($key,$data,60*10);
        }
        return $data;
    }

    public function getDataResultStatisticByMonth($catId, $date_end=null, $date_begin = '') {
        if (empty($date_end)) $date_end = date('Y-m-d');
        $date_begin = !empty($date_begin) ? $date_begin : date('Y-m',strtotime($date_end.'-4 month')).'-01';
        return $this->getFromDayToDay($date_begin, $date_end, $catId);
    }

    public function getDataResultStatisticByYear($catId,$year,$month = null) {
        $yearKey = json_encode($year);
        $key = "statistic_".implode('_',(array)$catId)."_{$yearKey}_{$month}";
        $data = $this->getCache($key);
        if(empty($data)) {
            $this->db->select(['data_result', 'displayed_time']);
            $this->db->from($this->table);
            $this->db->where_in("category_id", $catId);
            $this->db->where_in('YEAR(displayed_time)', (array)$year);
            if(!empty($month)) $this->db->where('MONTH(displayed_time)', $month);
            $this->db->order_by('displayed_time', 'ASC');
            $data = $this->db->get()->result_array();
            $this->setCache($key,$data,60*60*1);
        }
        return $data;
    }

    ///////////// crawler
    public function getDataByParams($selector,$params){
        if (!empty($selector)){
            $this->db->select($selector);
        }else{
            $this->db->select('*');
        }
        $this->db->from($this->table);
        $this->db->where($params);
        $data = $this->db->get()->row();
        return $data;
    }

    public function getCategoryBySlug($category){
        $this->db->select('id');
        $this->db->from($this->table_category);
        $this->db->like('slug',"$category");
        $data = $this->db->get()->row();
        return !empty($data) ? $data->id : false;
    }

    public function getCategoryByCode($code, $title, $slug){
        $this->db->select('id');
        $this->db->from($this->table_category);
        $this->db->like('code',$code);
        $this->db->or_like('title',$title);
        $this->db->or_like('slug', $slug);
        $data = $this->db->get()->row();
        return !empty($data) ? $data->id : false;
    }

    public function getAllResult($limit,$page, $after = null){
        $key = "all-result-p$page-lm$limit-bf$after";
        $data = $this->getCache($key);
        if (empty($data)){
            $this->db->select("displayed_time,category_id,updated_time");
            $this->db->from($this->table);
            $this->db->where_not_in("category_id",[42,43,44,45,54,55,56,57]);
            if ($after) $this->db->where("displayed_time >=", $after);
            $this->db->order_by("displayed_time","desc");
            $this->db->limit($limit,($page-1)*$limit);
            $data = $this->db->get()->result_array();
            $this->setCache($key,$data,60*10);
        }
        return $data;
    }
    public function getAllResultForSiteMap($params){
//        $params = ['limit', 'page', 'arr category_id', 'after'];
        $key = "getAllResultForSiteMap-".md5(json_encode($params));
        $data = $this->getCache($key);
        if (empty($data)){
            extract($params);
            if (empty($limit)) $limit = 1;
            if (empty($page)) $page = 1;
            if (empty($category_id)) $category_id = [];
            $category_id = (array)$category_id;

            $this->db->select("displayed_time, category_id");
            $this->db->from($this->table);
            if (!empty($category_id))
                $this->db->where_in('category_id', $category_id);
            if (!empty($after))
                $this->db->where('displayed_time >=', $after);
            $this->db->order_by("displayed_time","desc");
            $this->db->limit($limit,($page-1)*$limit);
            $data = $this->db->get()->result();
            $this->setCache($key,$data,60*5);
        }
        return $data;
    }

    public function getAllResultSiteMap888($limit,$page) {
        $key = "getAllResult888-p$page-lm$limit";
        $data = $this->getCache($key);
        if (empty($data)){
            $this->db->select("displayed_time,category_id,updated_time");
            $this->db->from($this->table);
            $this->db->where_not_in('category_id', [54,55,56]);
            $this->db->order_by("displayed_time","desc");
            $this->db->limit($limit,($page-1)*$limit);
            $data = $this->db->get()->result_array();
            $this->setCache($key,$data,60*10);
        }
        return $data;
    }

    public function getAllResultMB($before = null){
        $key = "getAllResultMB-bf$before";
        $data = $this->getCache($key);
        if (empty($data)){
            $this->db->select("data_result, displayed_time,category_id,updated_time");
            $this->db->from($this->table);
            $this->db->where("category_id", 1);
            if ($before) $this->db->where("displayed_time >=",$before);
            $this->db->order_by("displayed_time","desc");
            $this->db->limit(10000, 0);
            $data = $this->db->get()->result_array();
            $this->setCache($key,$data,60*10);
        }
        return $data;
    }

    public function getTotalAllResult()
    {
        $table = $this->table;
        $this->db->select('1');
        $this->db->from($table);
        return $this->db->count_all_results();
    }

    public function getTotalResult($displayed_time) {
        $key = "all-result-count_$displayed_time";
        $data = $this->getCache($key);
        if (empty($data)){
            $this->db->from($this->table);
            $this->db->where_not_in("category_id",[42,43,44,45,54,55,56,57]);
            $this->db->where("displayed_time >=",$displayed_time);
            $data = $this->db->get()->num_rows();
            $this->setCache($key,$data,99*100);
        }
        return $data;
    }
    public function getAllResultById($id) {
        $key = "all_id-result-count_$id";
        $data = $this->getCache($key);
        if (empty($data)){
            $this->db->from($this->table);
            $this->db->where("category_id",$id);
            $data = $this->db->get()->num_rows();
            $this->setCache($key,$data,99*100);
        }
        return $data;
    }

    //
    public function getBeginEndByLimit($catId, $limit) {
        $nameCache = "getBeginEndByLimit_".implode('_',(array)$catId)."_{$limit}";
        $data = $this->getCache($nameCache);
        if (empty($data)) {
            $this->db->select('*');
            $this->db->from($this->table);
            $this->db->group_by('displayed_time');
            $this->db->order_by('displayed_time','desc');
            $this->db->limit($limit);
            $data = $this->db->get()->result();
            $this->setCache($nameCache,$data,60*60*1);
        }
        $date['begin'] = $data[($limit-1)]->displayed_time;
        $date['end'] = $data[0]->displayed_time;
        return $date;
    }

    public function getListDate($listCategory, $page, $limit) {
        $keyCache = "getListDate".json_encode($listCategory).'-'.$page."_".$limit;
        $offset = ($page - 1)*$limit;
        $data = $this->getCache($keyCache);
        if (empty($data)) {
            $this->db->select('displayed_time');
            $this->db->distinct();
            $this->db->from($this->table);
            $this->db->where_in('category_id', (array) $listCategory);
            $this->db->order_by('displayed_time','desc');
            $this->db->limit($limit, $offset);
            $data = $this->db->get()->result();
            $this->setCache($keyCache,$data,5*60);
        }
        return $data;
    }

    public function getFromListDate($listDate, $listCategory, $updateCache = false){
        $keyCache = "getFromListDate".md5(json_encode($listDate))."_".md5(json_encode($listCategory));
        $data = $this->getCache($keyCache);
        if(empty($data) || $updateCache == true) {
            $arrDate = [];
            foreach($listDate as $date) $arrDate[] = $date->displayed_time;
            $this->db->select('data_result,data_info,category_id,displayed_time,created_time,updated_time');
            $this->db->from($this->table);
            if ($listCategory) $this->db->where_in("category_id", $listCategory);
            if ($listDate) $this->db->where_in("displayed_time", $arrDate);
            $this->db->order_by('displayed_time', 'DESC');
            $this->db->order_by("id", "ASC");
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($keyCache, $data, 10);
        }
        return $data;
    }

    public function getByKeno($limit=10,$page=1,$updateCache = false){
        $key = "getByKeno_limit{$limit}_$page";
        $data = $this->getCache($key);
        if(empty($data) || $updateCache == true) {
            $this->db->from('st_keno');
            $this->db->order_by("period", "DESC");
            $offset = ($page - 1) * $limit;
            $this->db->limit($limit, $offset);
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($key,$data,5);
        }
        return $data;
    }

    public function getKenoByPeriod($period=1,$updateCache = false){
        $key = "getKenoByPeriod_$period";
        $data = $this->getCache($key);
        if(empty($data) || $updateCache == true) {
            $this->db->from('st_keno');
            $this->db->where("period", $period);
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($key,$data,500);
        }
        return $data;
    }

    public function getKenoByDisplayed_time($displayed_time,$updateCache = false){
        $key = "getKenoByDisplayed_time_$displayed_time";
        $data = $this->getCache($key);
        if(empty($data) || $updateCache == true) {
            $this->db->from('st_keno');
            $this->db->where('displayed_time >=', "$displayed_time 00:00:00");
            $this->db->where('displayed_time <=', "$displayed_time 22:00:00");
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($key,$data,500);
        }
        return $data;
    }

    public function kenodaybyday($start_date, $end_date){
        $key = "kenodaybyday-$start_date-$end_date";
        $data = $this->getCache($key);
        if(empty($data)) {
            $this->db->from('st_keno');
            $this->db->where('displayed_time >=', "$start_date");
            $this->db->where('displayed_time <=', $end_date);
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($key,$data,500);
        }
        return $data;
    }

    public function getByMonth($category_id, $year, $month, $select = "*")
    {
        $this->db->select($select);
        if(is_array($category_id) == true) {
            $this->db->where('category_id < ', 40);
        } else {
            $this->db->where('category_id', $category_id);
        }
        $this->db->where('displayed_time >=', "$year-$month-01");
        $this->db->where('displayed_time <=', date("Y-m-t", strtotime("$year-$month-15")));
        $query = $this->db->get($this->table);
        return $query->result_array();
    }
    public function getByYear($category_id, $year, $select = "*")
    {
        $this->db->select($select);
        $this->db->where('category_id', $category_id);
        $this->db->where('displayed_time >=', "$year-01-01");
        $this->db->where('displayed_time <=', "$year-12-31");
        $query = $this->db->get($this->table);
        return $query->result_array();
    }
    public function getFromDayToDayProvinceMB($date_begin, $date_end, $categoryId = [], $dow,$updateCache = false){
        $categoryId = (array) $categoryId;

        $key = "getFromDayToDay_".md5($date_begin.$date_end)."_".md5(json_encode($categoryId));
        $data = $this->getCache($key);
        if(empty($data) || $updateCache == true) {
            $dow = explode(',', $dow);
            $this->db->select('data_result,data_info,category_id,displayed_time,created_time,updated_time');
            $this->db->from($this->table);
            if ($categoryId)
                $this->db->where_in("category_id", $categoryId);
            $this->db->where("displayed_time >=", $date_begin);
            $this->db->where("displayed_time <=", $date_end);
            $this->db->where_in('DAYOFWEEK(displayed_time)', $dow);
            $this->db->order_by('displayed_time', 'DESC');
            $this->db->order_by("id", "ASC");
            $query = $this->db->get();
            $data = $query->result_array();
            $this->setCache($key,$data,5);
        }
        return $data;
    }
}